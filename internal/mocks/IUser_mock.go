// Code generated by MockGen. DO NOT EDIT.
// Source: IUser.go
//
// Generated by this command:
//
//	mockgen -source=IUser.go -destination=../mocks/IUser_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "backend-test/internal/models"
	context "context"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
	isgomock struct{}
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// CekSessionByUUID mocks base method.
func (m *MockIUserRepository) CekSessionByUUID(ctx context.Context, uuid uuid.UUID) (*models.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CekSessionByUUID", ctx, uuid)
	ret0, _ := ret[0].(*models.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CekSessionByUUID indicates an expected call of CekSessionByUUID.
func (mr *MockIUserRepositoryMockRecorder) CekSessionByUUID(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CekSessionByUUID", reflect.TypeOf((*MockIUserRepository)(nil).CekSessionByUUID), ctx, uuid)
}

// FindByEmail mocks base method.
func (m *MockIUserRepository) FindByEmail(ctx context.Context, email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockIUserRepositoryMockRecorder) FindByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockIUserRepository)(nil).FindByEmail), ctx, email)
}

// GetUserSessionByToken mocks base method.
func (m *MockIUserRepository) GetUserSessionByToken(ctx context.Context, token string) (models.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSessionByToken", ctx, token)
	ret0, _ := ret[0].(models.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSessionByToken indicates an expected call of GetUserSessionByToken.
func (mr *MockIUserRepositoryMockRecorder) GetUserSessionByToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSessionByToken", reflect.TypeOf((*MockIUserRepository)(nil).GetUserSessionByToken), ctx, token)
}

// InsertNewUser mocks base method.
func (m *MockIUserRepository) InsertNewUser(ctx context.Context, user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewUser", ctx, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertNewUser indicates an expected call of InsertNewUser.
func (mr *MockIUserRepositoryMockRecorder) InsertNewUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewUser", reflect.TypeOf((*MockIUserRepository)(nil).InsertNewUser), ctx, user)
}

// InsertNewUserSession mocks base method.
func (m *MockIUserRepository) InsertNewUserSession(ctx context.Context, session *models.UserSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewUserSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNewUserSession indicates an expected call of InsertNewUserSession.
func (mr *MockIUserRepositoryMockRecorder) InsertNewUserSession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewUserSession", reflect.TypeOf((*MockIUserRepository)(nil).InsertNewUserSession), ctx, session)
}

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
	isgomock struct{}
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// CekSessionByUUID mocks base method.
func (m *MockIUserService) CekSessionByUUID(ctx context.Context, uuid uuid.UUID) (*models.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CekSessionByUUID", ctx, uuid)
	ret0, _ := ret[0].(*models.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CekSessionByUUID indicates an expected call of CekSessionByUUID.
func (mr *MockIUserServiceMockRecorder) CekSessionByUUID(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CekSessionByUUID", reflect.TypeOf((*MockIUserService)(nil).CekSessionByUUID), ctx, uuid)
}

// SubmitEmail mocks base method.
func (m *MockIUserService) SubmitEmail(ctx context.Context, request models.User) (*models.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitEmail", ctx, request)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SubmitEmail indicates an expected call of SubmitEmail.
func (mr *MockIUserServiceMockRecorder) SubmitEmail(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitEmail", reflect.TypeOf((*MockIUserService)(nil).SubmitEmail), ctx, request)
}

// MockIUserHandler is a mock of IUserHandler interface.
type MockIUserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIUserHandlerMockRecorder
	isgomock struct{}
}

// MockIUserHandlerMockRecorder is the mock recorder for MockIUserHandler.
type MockIUserHandlerMockRecorder struct {
	mock *MockIUserHandler
}

// NewMockIUserHandler creates a new mock instance.
func NewMockIUserHandler(ctrl *gomock.Controller) *MockIUserHandler {
	mock := &MockIUserHandler{ctrl: ctrl}
	mock.recorder = &MockIUserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserHandler) EXPECT() *MockIUserHandlerMockRecorder {
	return m.recorder
}

// CekSessionByUUID mocks base method.
func (m *MockIUserHandler) CekSessionByUUID(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CekSessionByUUID", c)
}

// CekSessionByUUID indicates an expected call of CekSessionByUUID.
func (mr *MockIUserHandlerMockRecorder) CekSessionByUUID(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CekSessionByUUID", reflect.TypeOf((*MockIUserHandler)(nil).CekSessionByUUID), c)
}

// SendMail mocks base method.
func (m *MockIUserHandler) SendMail(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMail", c)
}

// SendMail indicates an expected call of SendMail.
func (mr *MockIUserHandlerMockRecorder) SendMail(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockIUserHandler)(nil).SendMail), c)
}
