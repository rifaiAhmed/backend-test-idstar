// Code generated by MockGen. DO NOT EDIT.
// Source: IIngredient.go
//
// Generated by this command:
//
//	mockgen -source=IIngredient.go -destination=../mocks/IIngredient_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "backend-test/internal/models"
	context "context"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockIIngredientRepository is a mock of IIngredientRepository interface.
type MockIIngredientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIIngredientRepositoryMockRecorder
	isgomock struct{}
}

// MockIIngredientRepositoryMockRecorder is the mock recorder for MockIIngredientRepository.
type MockIIngredientRepositoryMockRecorder struct {
	mock *MockIIngredientRepository
}

// NewMockIIngredientRepository creates a new mock instance.
func NewMockIIngredientRepository(ctrl *gomock.Controller) *MockIIngredientRepository {
	mock := &MockIIngredientRepository{ctrl: ctrl}
	mock.recorder = &MockIIngredientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIngredientRepository) EXPECT() *MockIIngredientRepositoryMockRecorder {
	return m.recorder
}

// DeleteIngredient mocks base method.
func (m *MockIIngredientRepository) DeleteIngredient(ctx context.Context, ID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngredient", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIngredient indicates an expected call of DeleteIngredient.
func (mr *MockIIngredientRepositoryMockRecorder) DeleteIngredient(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngredient", reflect.TypeOf((*MockIIngredientRepository)(nil).DeleteIngredient), ctx, ID)
}

// FindByID mocks base method.
func (m *MockIIngredientRepository) FindByID(ctx context.Context, ID int) (*models.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, ID)
	ret0, _ := ret[0].(*models.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIIngredientRepositoryMockRecorder) FindByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIIngredientRepository)(nil).FindByID), ctx, ID)
}

// GetAllIngredient mocks base method.
func (m *MockIIngredientRepository) GetAllIngredient(ctx context.Context, param string) (*[]models.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllIngredient", ctx, param)
	ret0, _ := ret[0].(*[]models.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllIngredient indicates an expected call of GetAllIngredient.
func (mr *MockIIngredientRepositoryMockRecorder) GetAllIngredient(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllIngredient", reflect.TypeOf((*MockIIngredientRepository)(nil).GetAllIngredient), ctx, param)
}

// GetRecipeIncludeIngredients mocks base method.
func (m *MockIIngredientRepository) GetRecipeIncludeIngredients(ctx context.Context, ID int) (models.RecipeFormat, *[]models.IngredientCustom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipeIncludeIngredients", ctx, ID)
	ret0, _ := ret[0].(models.RecipeFormat)
	ret1, _ := ret[1].(*[]models.IngredientCustom)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRecipeIncludeIngredients indicates an expected call of GetRecipeIncludeIngredients.
func (mr *MockIIngredientRepositoryMockRecorder) GetRecipeIncludeIngredients(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipeIncludeIngredients", reflect.TypeOf((*MockIIngredientRepository)(nil).GetRecipeIncludeIngredients), ctx, ID)
}

// InsertIngredient mocks base method.
func (m *MockIIngredientRepository) InsertIngredient(ctx context.Context, obj *models.Ingredient) (*models.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIngredient", ctx, obj)
	ret0, _ := ret[0].(*models.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIngredient indicates an expected call of InsertIngredient.
func (mr *MockIIngredientRepositoryMockRecorder) InsertIngredient(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIngredient", reflect.TypeOf((*MockIIngredientRepository)(nil).InsertIngredient), ctx, obj)
}

// MultipleCreateUpdate mocks base method.
func (m *MockIIngredientRepository) MultipleCreateUpdate(ctx context.Context, objs []models.Ingredient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipleCreateUpdate", ctx, objs)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultipleCreateUpdate indicates an expected call of MultipleCreateUpdate.
func (mr *MockIIngredientRepositoryMockRecorder) MultipleCreateUpdate(ctx, objs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleCreateUpdate", reflect.TypeOf((*MockIIngredientRepository)(nil).MultipleCreateUpdate), ctx, objs)
}

// UpdateIngredient mocks base method.
func (m *MockIIngredientRepository) UpdateIngredient(ctx context.Context, obj *models.Ingredient) (*models.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIngredient", ctx, obj)
	ret0, _ := ret[0].(*models.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIngredient indicates an expected call of UpdateIngredient.
func (mr *MockIIngredientRepositoryMockRecorder) UpdateIngredient(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngredient", reflect.TypeOf((*MockIIngredientRepository)(nil).UpdateIngredient), ctx, obj)
}

// MockIIngredientService is a mock of IIngredientService interface.
type MockIIngredientService struct {
	ctrl     *gomock.Controller
	recorder *MockIIngredientServiceMockRecorder
	isgomock struct{}
}

// MockIIngredientServiceMockRecorder is the mock recorder for MockIIngredientService.
type MockIIngredientServiceMockRecorder struct {
	mock *MockIIngredientService
}

// NewMockIIngredientService creates a new mock instance.
func NewMockIIngredientService(ctrl *gomock.Controller) *MockIIngredientService {
	mock := &MockIIngredientService{ctrl: ctrl}
	mock.recorder = &MockIIngredientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIngredientService) EXPECT() *MockIIngredientServiceMockRecorder {
	return m.recorder
}

// DeleteIngredient mocks base method.
func (m *MockIIngredientService) DeleteIngredient(ctx context.Context, ID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngredient", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIngredient indicates an expected call of DeleteIngredient.
func (mr *MockIIngredientServiceMockRecorder) DeleteIngredient(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngredient", reflect.TypeOf((*MockIIngredientService)(nil).DeleteIngredient), ctx, ID)
}

// GetAllIngredient mocks base method.
func (m *MockIIngredientService) GetAllIngredient(ctx context.Context, param string) (*[]models.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllIngredient", ctx, param)
	ret0, _ := ret[0].(*[]models.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllIngredient indicates an expected call of GetAllIngredient.
func (mr *MockIIngredientServiceMockRecorder) GetAllIngredient(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllIngredient", reflect.TypeOf((*MockIIngredientService)(nil).GetAllIngredient), ctx, param)
}

// GetRecipeIncludeIngredients mocks base method.
func (m *MockIIngredientService) GetRecipeIncludeIngredients(ctx context.Context, ID int) (models.RecipeFormat, *[]models.IngredientCustom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipeIncludeIngredients", ctx, ID)
	ret0, _ := ret[0].(models.RecipeFormat)
	ret1, _ := ret[1].(*[]models.IngredientCustom)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRecipeIncludeIngredients indicates an expected call of GetRecipeIncludeIngredients.
func (mr *MockIIngredientServiceMockRecorder) GetRecipeIncludeIngredients(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipeIncludeIngredients", reflect.TypeOf((*MockIIngredientService)(nil).GetRecipeIncludeIngredients), ctx, ID)
}

// InsertIngredient mocks base method.
func (m *MockIIngredientService) InsertIngredient(ctx context.Context, obj *models.Ingredient) (*models.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIngredient", ctx, obj)
	ret0, _ := ret[0].(*models.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIngredient indicates an expected call of InsertIngredient.
func (mr *MockIIngredientServiceMockRecorder) InsertIngredient(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIngredient", reflect.TypeOf((*MockIIngredientService)(nil).InsertIngredient), ctx, obj)
}

// MultipleCreateUpdate mocks base method.
func (m *MockIIngredientService) MultipleCreateUpdate(ctx context.Context, data models.MultipleIngredients) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipleCreateUpdate", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultipleCreateUpdate indicates an expected call of MultipleCreateUpdate.
func (mr *MockIIngredientServiceMockRecorder) MultipleCreateUpdate(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleCreateUpdate", reflect.TypeOf((*MockIIngredientService)(nil).MultipleCreateUpdate), ctx, data)
}

// UpdateIngredient mocks base method.
func (m *MockIIngredientService) UpdateIngredient(ctx context.Context, obj *models.Ingredient) (*models.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIngredient", ctx, obj)
	ret0, _ := ret[0].(*models.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIngredient indicates an expected call of UpdateIngredient.
func (mr *MockIIngredientServiceMockRecorder) UpdateIngredient(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngredient", reflect.TypeOf((*MockIIngredientService)(nil).UpdateIngredient), ctx, obj)
}

// MockIIngredientHandler is a mock of IIngredientHandler interface.
type MockIIngredientHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIIngredientHandlerMockRecorder
	isgomock struct{}
}

// MockIIngredientHandlerMockRecorder is the mock recorder for MockIIngredientHandler.
type MockIIngredientHandlerMockRecorder struct {
	mock *MockIIngredientHandler
}

// NewMockIIngredientHandler creates a new mock instance.
func NewMockIIngredientHandler(ctrl *gomock.Controller) *MockIIngredientHandler {
	mock := &MockIIngredientHandler{ctrl: ctrl}
	mock.recorder = &MockIIngredientHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIngredientHandler) EXPECT() *MockIIngredientHandlerMockRecorder {
	return m.recorder
}

// DeleteIngredient mocks base method.
func (m *MockIIngredientHandler) DeleteIngredient(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteIngredient", c)
}

// DeleteIngredient indicates an expected call of DeleteIngredient.
func (mr *MockIIngredientHandlerMockRecorder) DeleteIngredient(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngredient", reflect.TypeOf((*MockIIngredientHandler)(nil).DeleteIngredient), c)
}

// GetAllIngredient mocks base method.
func (m *MockIIngredientHandler) GetAllIngredient(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllIngredient", c)
}

// GetAllIngredient indicates an expected call of GetAllIngredient.
func (mr *MockIIngredientHandlerMockRecorder) GetAllIngredient(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllIngredient", reflect.TypeOf((*MockIIngredientHandler)(nil).GetAllIngredient), c)
}

// GetRecipeIncludeIngredients mocks base method.
func (m *MockIIngredientHandler) GetRecipeIncludeIngredients(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetRecipeIncludeIngredients", c)
}

// GetRecipeIncludeIngredients indicates an expected call of GetRecipeIncludeIngredients.
func (mr *MockIIngredientHandlerMockRecorder) GetRecipeIncludeIngredients(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipeIncludeIngredients", reflect.TypeOf((*MockIIngredientHandler)(nil).GetRecipeIncludeIngredients), c)
}

// InsertIngredient mocks base method.
func (m *MockIIngredientHandler) InsertIngredient(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertIngredient", c)
}

// InsertIngredient indicates an expected call of InsertIngredient.
func (mr *MockIIngredientHandlerMockRecorder) InsertIngredient(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIngredient", reflect.TypeOf((*MockIIngredientHandler)(nil).InsertIngredient), c)
}

// MultipleCreateUpdate mocks base method.
func (m *MockIIngredientHandler) MultipleCreateUpdate(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MultipleCreateUpdate", c)
}

// MultipleCreateUpdate indicates an expected call of MultipleCreateUpdate.
func (mr *MockIIngredientHandlerMockRecorder) MultipleCreateUpdate(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleCreateUpdate", reflect.TypeOf((*MockIIngredientHandler)(nil).MultipleCreateUpdate), c)
}

// UpdateIngredient mocks base method.
func (m *MockIIngredientHandler) UpdateIngredient(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateIngredient", c)
}

// UpdateIngredient indicates an expected call of UpdateIngredient.
func (mr *MockIIngredientHandlerMockRecorder) UpdateIngredient(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngredient", reflect.TypeOf((*MockIIngredientHandler)(nil).UpdateIngredient), c)
}
