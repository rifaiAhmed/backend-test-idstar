// Code generated by MockGen. DO NOT EDIT.
// Source: IRecipe.go
//
// Generated by this command:
//
//	mockgen -source=IRecipe.go -destination=../mocks/IRecipe_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "backend-test/internal/models"
	context "context"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockIRecipeRepository is a mock of IRecipeRepository interface.
type MockIRecipeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRecipeRepositoryMockRecorder
	isgomock struct{}
}

// MockIRecipeRepositoryMockRecorder is the mock recorder for MockIRecipeRepository.
type MockIRecipeRepositoryMockRecorder struct {
	mock *MockIRecipeRepository
}

// NewMockIRecipeRepository creates a new mock instance.
func NewMockIRecipeRepository(ctrl *gomock.Controller) *MockIRecipeRepository {
	mock := &MockIRecipeRepository{ctrl: ctrl}
	mock.recorder = &MockIRecipeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRecipeRepository) EXPECT() *MockIRecipeRepositoryMockRecorder {
	return m.recorder
}

// CountData mocks base method.
func (m *MockIRecipeRepository) CountData(ctx context.Context, objComponent models.ComponentServerSide) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountData", ctx, objComponent)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountData indicates an expected call of CountData.
func (mr *MockIRecipeRepositoryMockRecorder) CountData(ctx, objComponent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountData", reflect.TypeOf((*MockIRecipeRepository)(nil).CountData), ctx, objComponent)
}

// DeleteRecipe mocks base method.
func (m *MockIRecipeRepository) DeleteRecipe(ctx context.Context, ID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecipe", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecipe indicates an expected call of DeleteRecipe.
func (mr *MockIRecipeRepositoryMockRecorder) DeleteRecipe(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipe", reflect.TypeOf((*MockIRecipeRepository)(nil).DeleteRecipe), ctx, ID)
}

// FindByID mocks base method.
func (m *MockIRecipeRepository) FindByID(ctx context.Context, ID int) (*models.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, ID)
	ret0, _ := ret[0].(*models.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIRecipeRepositoryMockRecorder) FindByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIRecipeRepository)(nil).FindByID), ctx, ID)
}

// GetAllRecipe mocks base method.
func (m *MockIRecipeRepository) GetAllRecipe(ctx context.Context, objComponent models.ComponentServerSide, param string) ([]models.RecipeFormat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRecipe", ctx, objComponent, param)
	ret0, _ := ret[0].([]models.RecipeFormat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRecipe indicates an expected call of GetAllRecipe.
func (mr *MockIRecipeRepositoryMockRecorder) GetAllRecipe(ctx, objComponent, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRecipe", reflect.TypeOf((*MockIRecipeRepository)(nil).GetAllRecipe), ctx, objComponent, param)
}

// InsertRecipe mocks base method.
func (m *MockIRecipeRepository) InsertRecipe(ctx context.Context, obj *models.Recipe) (*models.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRecipe", ctx, obj)
	ret0, _ := ret[0].(*models.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertRecipe indicates an expected call of InsertRecipe.
func (mr *MockIRecipeRepositoryMockRecorder) InsertRecipe(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRecipe", reflect.TypeOf((*MockIRecipeRepository)(nil).InsertRecipe), ctx, obj)
}

// UpdateRecipe mocks base method.
func (m *MockIRecipeRepository) UpdateRecipe(ctx context.Context, obj *models.Recipe) (*models.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipe", ctx, obj)
	ret0, _ := ret[0].(*models.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecipe indicates an expected call of UpdateRecipe.
func (mr *MockIRecipeRepositoryMockRecorder) UpdateRecipe(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipe", reflect.TypeOf((*MockIRecipeRepository)(nil).UpdateRecipe), ctx, obj)
}

// MockIRecipeService is a mock of IRecipeService interface.
type MockIRecipeService struct {
	ctrl     *gomock.Controller
	recorder *MockIRecipeServiceMockRecorder
	isgomock struct{}
}

// MockIRecipeServiceMockRecorder is the mock recorder for MockIRecipeService.
type MockIRecipeServiceMockRecorder struct {
	mock *MockIRecipeService
}

// NewMockIRecipeService creates a new mock instance.
func NewMockIRecipeService(ctrl *gomock.Controller) *MockIRecipeService {
	mock := &MockIRecipeService{ctrl: ctrl}
	mock.recorder = &MockIRecipeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRecipeService) EXPECT() *MockIRecipeServiceMockRecorder {
	return m.recorder
}

// CountData mocks base method.
func (m *MockIRecipeService) CountData(ctx context.Context, objComponent models.ComponentServerSide) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountData", ctx, objComponent)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountData indicates an expected call of CountData.
func (mr *MockIRecipeServiceMockRecorder) CountData(ctx, objComponent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountData", reflect.TypeOf((*MockIRecipeService)(nil).CountData), ctx, objComponent)
}

// DeleteRecipe mocks base method.
func (m *MockIRecipeService) DeleteRecipe(ctx context.Context, ID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecipe", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecipe indicates an expected call of DeleteRecipe.
func (mr *MockIRecipeServiceMockRecorder) DeleteRecipe(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipe", reflect.TypeOf((*MockIRecipeService)(nil).DeleteRecipe), ctx, ID)
}

// GetAllRecipe mocks base method.
func (m *MockIRecipeService) GetAllRecipe(ctx context.Context, objComponent models.ComponentServerSide, param string) ([]models.RecipeFormat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRecipe", ctx, objComponent, param)
	ret0, _ := ret[0].([]models.RecipeFormat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRecipe indicates an expected call of GetAllRecipe.
func (mr *MockIRecipeServiceMockRecorder) GetAllRecipe(ctx, objComponent, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRecipe", reflect.TypeOf((*MockIRecipeService)(nil).GetAllRecipe), ctx, objComponent, param)
}

// InsertRecipe mocks base method.
func (m *MockIRecipeService) InsertRecipe(ctx context.Context, obj *models.Recipe) (*models.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRecipe", ctx, obj)
	ret0, _ := ret[0].(*models.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertRecipe indicates an expected call of InsertRecipe.
func (mr *MockIRecipeServiceMockRecorder) InsertRecipe(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRecipe", reflect.TypeOf((*MockIRecipeService)(nil).InsertRecipe), ctx, obj)
}

// UpdateRecipe mocks base method.
func (m *MockIRecipeService) UpdateRecipe(ctx context.Context, obj *models.Recipe) (*models.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipe", ctx, obj)
	ret0, _ := ret[0].(*models.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecipe indicates an expected call of UpdateRecipe.
func (mr *MockIRecipeServiceMockRecorder) UpdateRecipe(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipe", reflect.TypeOf((*MockIRecipeService)(nil).UpdateRecipe), ctx, obj)
}

// MockIRecipeHandler is a mock of IRecipeHandler interface.
type MockIRecipeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIRecipeHandlerMockRecorder
	isgomock struct{}
}

// MockIRecipeHandlerMockRecorder is the mock recorder for MockIRecipeHandler.
type MockIRecipeHandlerMockRecorder struct {
	mock *MockIRecipeHandler
}

// NewMockIRecipeHandler creates a new mock instance.
func NewMockIRecipeHandler(ctrl *gomock.Controller) *MockIRecipeHandler {
	mock := &MockIRecipeHandler{ctrl: ctrl}
	mock.recorder = &MockIRecipeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRecipeHandler) EXPECT() *MockIRecipeHandlerMockRecorder {
	return m.recorder
}

// DeleteRecipe mocks base method.
func (m *MockIRecipeHandler) DeleteRecipe(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteRecipe", c)
}

// DeleteRecipe indicates an expected call of DeleteRecipe.
func (mr *MockIRecipeHandlerMockRecorder) DeleteRecipe(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipe", reflect.TypeOf((*MockIRecipeHandler)(nil).DeleteRecipe), c)
}

// GetAllRecipe mocks base method.
func (m *MockIRecipeHandler) GetAllRecipe(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllRecipe", c)
}

// GetAllRecipe indicates an expected call of GetAllRecipe.
func (mr *MockIRecipeHandlerMockRecorder) GetAllRecipe(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRecipe", reflect.TypeOf((*MockIRecipeHandler)(nil).GetAllRecipe), c)
}

// InsertRecipe mocks base method.
func (m *MockIRecipeHandler) InsertRecipe(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertRecipe", c)
}

// InsertRecipe indicates an expected call of InsertRecipe.
func (mr *MockIRecipeHandlerMockRecorder) InsertRecipe(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRecipe", reflect.TypeOf((*MockIRecipeHandler)(nil).InsertRecipe), c)
}

// UpdateRecipe mocks base method.
func (m *MockIRecipeHandler) UpdateRecipe(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateRecipe", c)
}

// UpdateRecipe indicates an expected call of UpdateRecipe.
func (mr *MockIRecipeHandlerMockRecorder) UpdateRecipe(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipe", reflect.TypeOf((*MockIRecipeHandler)(nil).UpdateRecipe), c)
}
